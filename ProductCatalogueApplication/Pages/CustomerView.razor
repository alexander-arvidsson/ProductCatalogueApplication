@page "/customers"
@using ProductCatalogueApplication.Data
@using ProductCatalogueApplication.Data.Interfaces
@inject ICustomerRepository customerRepo

<h1>Display </h1>
<div class="row bg-light">
    <table class="table table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Customer ID</th>
                <th>Customer Name</th>
                <th>Customer E-mail</th>
                <th>Customer Telephone</th>
                <th>Remove Customer</th>
            </tr>
        </thead>
        <tbody>
            @if (displayCustomers.Any())
            {
                @foreach (var b in displayCustomers)
                {
            <tr>

                <td>@b.Id</td>
                <td>@b.Name </td>
                <td>@b.Email</td>
                <td>@b.Phone</td>
                <td><button class="btn btn-danger" type="submit">Remove Customer</button></td>

            </tr>


                }
            }
        </tbody>
    </table>
</div>


<EditForm Model="@newCustomer" OnValidSubmit="(() => AddCustomer(newCustomer))">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="form-group">
        <label for="name">Customer name</label>
        <input @bind-value="@newCustomer.Name" type="text" />
    </div>
    <div class="form-group">
        <label for="email">Customer Email</label>
        <input @bind-value="@newCustomer.Email" type="text" step="0.01" />
    </div>
    <div class="form-group">
        <label for="phone">Customer Phone</label>
        <input @bind-value="@newCustomer.Phone" type="text" />
    </div>

    <button class="btn btn-info" type="submit">Add Customer</button>
</EditForm>


@code{
    private List<Customer> displayCustomers;
    private List<Customer> singeCustomer;
    private Customer newCustomer = new Customer();

    protected override async Task OnInitializedAsync()
    {
        displayCustomers = await customerRepo.GetCustomersAsync();
    }

    //Lägg till en metod som sparar i databasen!

    private async void AddCustomer(Customer customer)
    {
        customerRepo.AddCustomer(newCustomer);
        singeCustomer = await customerRepo.GetCustomersAsync(customer.Id);
        displayCustomers.Add(singeCustomer.First());
    }
}
