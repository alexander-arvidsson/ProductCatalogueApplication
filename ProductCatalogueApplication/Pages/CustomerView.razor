@page "/customers"
@using ProductCatalogueApplication.Data
@using ProductCatalogueApplication.Data.Interfaces
@inject IOrderRepository orderRepo
@inject ICustomerRepository customerRepo

<h1>Customers </h1>
<div class="row bg-light">
    <table class="table table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Customer ID</th>
                <th>Customer Name</th>
                <th>Customer E-mail</th>
                <th>Customer Telephone</th>
                @if (IsInspecting == false)
                {
                    <th>Remove Customer</th>
                    <th>Update Customer</th>
                    <th>Inspect Customer</th>
                }
            </tr>
        </thead>
        <tbody>
            @if (displayCustomers.Any())
            {
                @foreach (var b in displayCustomers)
                {
                    <tr>
                        <td>@b.Id</td>
                        <td>@b.Name </td>
                        <td>@b.Email</td>
                        <td>@b.Phone</td>
                        @if (IsInspecting == false)
                        {
                            <td><button class="btn btn-danger" @onclick="(() => RemoveCustomer(b))">Remove Customer</button></td>
                            <td><button class="btn btn-outline-info" @onclick="(() => SelectToUpdate(b))">Update Customer</button></td>
                            <td><button class="btn btn-outline-info" @onclick="(() => InspectCustomer(b))">Inspect Customer</button></td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@if (IsInspecting == true)
{
    <h1>Orders </h1>
    @if (customerOrders.Any())
    {
        <select type="text" id="products" class="form-control select-picker" @bind="@FilterFunction">
            <option value="1">All orders</option>
            <option value="2">All archived orders</option>
            <option value="3">All active orders</option>
        </select>
        <button class="btn btn-info" type="button" @onclick="(() => FilterGUI(selectedCustomer))">Filter</button>
        <p></p>
        <div class="row bg-light">
            <table class="table table-bordered">
                <thead class="thead-dark">
                    <tr>
                        <th>Order ID</th>
                        <th>Delivery Adress</th>
                        <th>Order Date</th>
                        <th>Payment Completed</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var b in customerOrders)
                    {
                        <tr>

                            <td>@b.Id</td>
                            <td>@b.DeliveryAdress </td>
                            <td>@b.OrderDate</td>
                            <td>@b.PaymentCompleted</td>
                        </tr>

                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <tr>
            <td> No orders found... </td>
        </tr>
    }
    <br>
    <td><button class="btn btn-outline-info" @onclick="(() => OnInitializedAsync())">Back</button></td>
}


@if (IsInspecting == false && IsUpdating != true)
{
    <h3>Add a customer</h3>
    <EditForm Model="@newCustomer" OnValidSubmit="(() => AddCustomer(newCustomer))">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Customer Name</label>
            <input @bind-value="@newCustomer.Name" type="text" />
        </div>
        <div class="form-group">
            <label for="email">Customer Email</label>
            <input @bind-value="@newCustomer.Email" type="text" step="0.01" />
        </div>
        <div class="form-group">
            <label for="phone">Customer Phone</label>
            <input @bind-value="@newCustomer.Phone" type="text" />
        </div>

        <button class="btn btn-info" type="submit">Add Customer</button>
    </EditForm>
}

@if (IsUpdating == true)
{
    <h3>Update a customer</h3>
    <EditForm Model="@updateCustomer" OnValidSubmit="(() => UpdateCustomer(updateCustomer))">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Customer Name</label>
            <input @bind-value="@updateCustomer.Name" type="text" />
        </div>
        <div class="form-group">
            <label for="email">Customer Email</label>
            <input @bind-value="@updateCustomer.Email" type="text" step="0.01" />
        </div>
        <div class="form-group">
            <label for="phone">Customer Phone</label>
            <input @bind-value="@updateCustomer.Phone" type="text" />
        </div>

        <button class="btn btn-info" type="submit">Update Customer</button>
    </EditForm>
}
<p></p>

@code{
    private List<Customer> displayCustomers;
    private List<Order> customerOrders;
    private Customer newCustomer = new Customer();
    private Customer updateCustomer = new Customer();
    private Customer selectedCustomer;
    private bool IsUpdating;
    private bool IsInspecting;

    protected override async Task OnInitializedAsync()
    {
        displayCustomers = await customerRepo.GetCustomersAsync();
        IsInspecting = false;
    }

    //0. Lägg till en metod som sparar i databasen!
    //1. Gör alla metoder till async eftersom det används mer i arbetslivet...
    //2. Lägg till dispatched/not dispatched list-metod

   
    private async Task AddCustomer(Customer customer)
    {
        await customerRepo.AddCustomer(newCustomer);
        displayCustomers.Add(customer);
        newCustomer = new Customer();
    }

    private async Task RemoveCustomer(Customer customer)
    {
        await customerRepo.RemoveCustomer(customer);
        displayCustomers.Remove(customer);
    }

    private async Task UpdateCustomer(Customer customer)
    {
        await customerRepo.UpdateCustomer(customer);
        IsUpdating = false;
    }


    private void SelectToUpdate(Customer updated)
    {
        updateCustomer = updated;
        IsUpdating = true;
    }

    private async void InspectCustomer(Customer customer)
    {
        List<Order> getOrders = new List<Order>();
        IsInspecting = true;
        IsUpdating = false;
        selectedCustomer = customer;

        displayCustomers = displayCustomers.Where(c => c.Id == customer.Id).ToList();
        customerOrders = await orderRepo.GetOrdersAsync(customer.Id);
    }

    public string FilterFunction { get; set; }
    private async void FilterGUI(Customer c)
    {
        switch (FilterFunction)
        {
            case "1":
                customerOrders = await orderRepo.GetOrdersAsync(c.Id);
                break;
            case "2":
                customerOrders = await orderRepo.DisplayArchivedCustomerOrder(c);
                break;
            case "3":
                customerOrders = await orderRepo.DisplayActiveCustomerOrder(c);
                break;
            default:
                customerOrders = await orderRepo.GetOrdersAsync(c.Id);
                break;
        }
    }
}
