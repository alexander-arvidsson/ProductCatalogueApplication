@page "/orders"
@using ProductCatalogueApplication.Data
@using ProductCatalogueApplication.Data.Interfaces

@inject IOrderRepository orderRepo

@inject ICustomerRepository customerRepo

@inject IProductRepository productRepo

<h1>Orders</h1>
@if (IsUpdating == true)
{
    <h3>Update an order</h3>
    <EditForm Model="@updatedOrder" OnValidSubmit="(() => UpdateOrder())">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputSelectNumber id="customer" @bind-Value="@updatedOrder.CustomerId">
            @foreach (Customer cust in displayCustomers)
                {
                <option value="@cust.Id"> @cust.Name {@cust.Id} </option>
                }
            /**/
        </InputSelectNumber>
        <div class="form-group">
            <label for="adress">Order Adress</label>
            <input @bind-value="@updatedOrder.DeliveryAdress" type="text" />
        </div>
        <button class="btn btn-info" type="submit">Update Order</button>
    </EditForm>
}
else
{
    <h3>Add a new order and choose what items to include</h3>
    <EditForm Model="@prepNewOrder" OnValidSubmit="(() => PrepareNewOrder(prepNewOrder))">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="adress"> Order Adress </label>
            <input @bind-value="@prepNewOrder.DeliveryAdress" type="text" />
        </div>
        <label for="customer"> Customer </label>
        <InputSelectNumber id="customer" @bind-Value="@prepNewOrder.CustomerId">
            @foreach (Customer cust in displayCustomers)
                {
                <option value="@cust.Id"> @cust.Name {@cust.Id} </option>
                }
            /**/
        </InputSelectNumber>
        <button class="btn btn-success" type="submit"> Add Order </button>
    </EditForm>
}
@if (readyOrderLines)
{
    <h4>Välj vilka items som ska inkluderas i ordern </h4>
    <EditForm Model="@prepNewOrderLine" OnValidSubmit="(() => NewOrderAndOrderLines(prepNewOrder, prepNewOrderLine))">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <label for="product"> Product </label>
        <InputSelectNumber id="product" @bind-Value="@prepNewOrderLine.ProductId">
            @foreach (Product prod in displayProducts)
                {
                <option value="@prod.Id"> @prod.Name {@prod.Price $} </option>
                }
            /**/
        </InputSelectNumber>
        <div class="form-group">
            <label for="customerId"> Quantity </label>
            <input @bind-value="@prepNewOrderLine.Quantity" type="number" />
        </div>
        <button class="btn btn-outline-secondary" type="submit"> Add item to your current order </button>
    </EditForm>
    <button class="btn btn-warning" @onclick="() => DoneAddingItems()"> Done adding items? </button>
}

<!-- <select type="text" id="products" class="form-control select-picker" @bind="@FilterFunction">
    <option value="1">All orders</option>
    <option value="2">Dispatched orders</option>
    <option value="3">Pending orders</option>
</select>
<br>
<button class="btn btn-info" type="button" @onclick="@FilterGUI">Filter</button>
<p></p>-->

<h3>Current orders</h3>
<div class="row bg-light">
    <table class="table table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Order ID</th>
                <th>Customer ID</th>
                <th>Delivery Adress</th>
                <th>Dispatched</th>
                <th>Order Date</th>
                <th>Payment Completed</th>
                <th>Nr of items</th>
                <th class="bg-success">Update</th>
            </tr>
        </thead>
        <tbody>
            @if (displayOrders.Any())
            {
                @foreach (var b in displayOrders)
                {
                    <tr>
                        <td>@b.Id</td>
                        <td>@b.CustomerId</td>
                        <td>@b.DeliveryAdress </td>
                        <td>@b.Dispatched</td>
                        <td>@b.OrderDate</td>
                        <td>@b.PaymentCompleted</td>
                        <td><button class="btn btn-outline-info" type="button" @onclick="(() => SeeItemsInOrder(b))"> See @b.Items.Count() items </button></td>
                        @if (b.Dispatched == true)
                        {
                            <td>The product has been dispatched.</td>
                        }
                        else
                        {
                            <td>
                                <button type="button" @onclick="(() => SetForUpdate(b))" class="btn btn-outline-success"> Uppdatera Orderinfo </button>
                                <button type="button" @onclick="(() => SetPayment(true, b))" class="btn btn-danger">Not Payed</button>
                                <button type="button" @onclick="(() => SetPayment(false, b))" class="btn btn-success">Payed</button>
                            </td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
    <button class="btn btn-outline-success" type="button" @onclick="(() => ProcessBatchorders(displayOrders))"> Process Batchorders </button>
    <button class="btn btn-outline-dark" type="button" @onclick="(() => GetDispatchedOrdersOnly())"> Show Dispatched Orders </button>
    <button class="btn btn-outline-dark" type="button" @onclick="(() => GetPendingOrdersOnly())"> Show Pending Orders </button>
</div>

@if (seeItemsInOrder == true)
{
    <h1 class="alert-light">Items inuti den valda ordern </h1>
    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Orderline ID</th>
                    <th>Product ID</th>
                    <th>Product Name</th>
                    <th>Product Price</th>
                    <th>Quantity</th>
                    <th>Restocking Date</th>
                </tr>
            </thead>
            <tbody>
                @if (seeMyItemsSpec != null)
                {
                    @foreach (OrderLine b in seeMyItemsSpec)
                    {
                        <tr>
                            <td>@b.Id</td>
                            <td>@b.ProductId</td>
                            <td>@b.Product.Name</td>
                            <td>@b.Product.Price $</td>
                            <td>@b.Quantity </td>
                            @if (b.Product.RestockingDate.ToString().Equals("0001-01-01 00:00:00"))
                            {
                                <td>No restocking date </td>
                            }
                            else
                            {
                                <td>@b.Product.RestockingDate </td>
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}

@if (dispatched == true)
{
    <h1 class="alert-light">Dispatched Orders </h1>
    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Order ID</th>
                    <th>Customer ID</th>
                    <th>Delivery Adress</th>
                    <th>Dispatched</th>
                    <th>Order Date</th>
                    <th>Payment Completed</th>
                    <th>Nr of items</th>



                </tr>
            </thead>
            <tbody>
                @if (onlyDispatchedOrders != null)
                {
                    @foreach (Order b in onlyDispatchedOrders)
                    {
                        <tr>

                            <td>@b.Id</td>
                            <td>@b.CustomerId</td>
                            <td>@b.DeliveryAdress </td>
                            <td>@b.Dispatched</td>
                            <td>@b.OrderDate</td>
                            <td>@b.PaymentCompleted</td>
                            <td>@b.Items.Count()</td>
                            <td><button class="btn btn-outline-info" type="button" @onclick="(() => SeeItemsInOrder(b))"> See @b.Items.Count() items </button></td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}
@if (pending == true)
{
    <h1 class="alert-light">Pending Orders </h1>
    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Order ID</th>
                    <th>Customer ID</th>
                    <th>Delivery Adress</th>
                    <th>Dispatched</th>
                    <th>Order Date</th>
                    <th>Payment Completed</th>
                    <th>Nr of items</th>
                    <th>See items in order</th>
                </tr>
            </thead>
            <tbody>
                @if (onlyPendingOrders != null)
                {
                    @foreach (Order b in onlyPendingOrders)
                    {
                        <tr>

                            <td>@b.Id</td>
                            <td>@b.CustomerId</td>
                            <td>@b.DeliveryAdress </td>
                            <td>@b.Dispatched</td>
                            <td>@b.OrderDate</td>
                            <td>@b.PaymentCompleted</td>
                            <td>@b.Items.Count()</td>
                            <td><button class="btn btn-outline-info" type="button" @onclick="(() => SeeItemsInOrder(b))">See @b.Items.Count() items</button></td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

}
@code{
    //Order updateOrder = new Order();
    bool dispatched = false;
    bool pending = false;


    Order prepNewOrder = new Order();
    OrderLine prepNewOrderLine = new OrderLine();

    private bool IsUpdating = false;
    bool avoidDuplicate = false;
    bool readyOrderLines = false;
    bool seeItemsInOrder = false;
    bool firstOrderLine = false;
    Order seeMyItems;
    List<OrderLine> seeMyItemsSpec;

    List<Customer> displayCustomers;
    List<Product> displayProducts;

    List<Order> displayOrders;
    List<OrderLine> prepareOrderLine;

    List<Order> onlyPendingOrders;
    List<Order> onlyDispatchedOrders;


    protected override async Task OnInitializedAsync()
    {
        displayOrders = await orderRepo.GetOrdersAsync();
        prepareOrderLine = await orderRepo.GetOrderLinesAsync();
        displayCustomers = await customerRepo.GetCustomersAsync();
        displayProducts = await productRepo.GetProductsAsync();
        orderRepo.deleteNoItemsOrders();
    }



    private async Task PrepareNewOrderLine(OrderLine addOrderLine) //////////////
    {
        //gör en metod där jag gör en orderlist som är kopplad mot det tidigare prepOrder objektet

        await orderRepo.AddNewOrderLine(addOrderLine, prepNewOrder);
        prepNewOrderLine = new OrderLine();

    }
    private async Task AddNewOrder(Order o) /////////////////// vi vill visa alternativen vilka produkter finns och hur många sen kan man lägga en order
    {
        //en order måste ha en kund, om den inte finns så kan den inte skapas
        //avoid duplicate
        if (avoidDuplicate == false)
        {
            await orderRepo.AddNewOrder(o);
            avoidDuplicate = true;
        }

    }

    private void PrepareNewOrder(Order prepareForOrder) //////////////// vi vill visa alternativen vilka produkter finns och hur många sen kan man lägga en order
    {
        //en order måste ha en kund, om den inte finns så kan den inte skapas
        //placeOrder = true;
        readyOrderLines = true;

        orderRepo.AddNewOrder(prepareForOrder); //lägger till okbjektet
                                                //activeOrders.Add(o); //lägger till i denna lista tillfälligt för att göra så att vi kan gå vidare till orderlines

    }

    private async Task NewOrderAndOrderLines(Order firstOrder, OrderLine orderLineItem)
    { //lägga till ordern i listan OM det är vårat första item, samt först orderline i listan
      //om det inte är vårat första item så ska den endast uppdatera i listan för orderline

        prepareOrderLine = await orderRepo.GetOrderLinesAsync();

        if (firstOrderLine == false)
        {
            firstOrderLine = true;

            displayOrders.Add(firstOrder);
            prepareOrderLine.Add(orderLineItem);
            await PrepareNewOrderLine(orderLineItem);
        }
        else //vårat andra eller fler items
        {
            prepareOrderLine.Add(orderLineItem);
            await PrepareNewOrderLine(orderLineItem);


        }
    }


    //uppdateringsfunktinoalitet för ordrar

    Order updatedOrder = new Order();
    //Product updatedProduct = new Product();

    Order closeOpenSeeItems = new Order();
    Order closeOpenUpdateOrder = new Order();

    private void ProcessBatchorders(List<Order> allOrders) //får skicka med båda objekten så att vi kan hålla koll på stock osv
    {
        dispatched = false;
        pending = false;
        orderRepo.ProcessBatchorders(allOrders);

    }
    private void UpdateOrder() //får skicka med båda objekten så att vi kan hålla koll på stock osv
    {
        orderRepo.UpdateOrder(updatedOrder);
    }

    private void SetForUpdate(Order selectedOrder) //får skicka med båda objekten så att vi kan hålla koll på stock osv
    {

        if (IsUpdating == true && closeOpenUpdateOrder == selectedOrder)
        {
            IsUpdating = false;
        }
        else
        {
            closeOpenUpdateOrder = selectedOrder;
            updatedOrder = selectedOrder;
            IsUpdating = true;
        }

    }

    private void SetPayment(bool payedOrNot, Order order)
    {
        orderRepo.SetPayment(payedOrNot, order);
    }

    private void DoneAddingItems()
    {
        avoidDuplicate = false;
        readyOrderLines = false;
        orderRepo.deleteNoItemsOrders();
    }

    private void SeeItemsInOrder(Order seeInOrder) //Vi vill se vilka items som finns i en order och produkter kopplade till orderlines
    {
        if (seeItemsInOrder == true && seeInOrder == closeOpenSeeItems) //gör så att vi kan klicka på knappen igen och fönstret stänger
        {

            seeItemsInOrder = false;

        }
        else
        {
            closeOpenSeeItems = seeInOrder;

            seeItemsInOrder = true;
            seeMyItems = seeInOrder;
            seeMyItemsSpec = prepareOrderLine.Where(b => b.Order == seeInOrder).ToList();

        }

    }

    private void GetDispatchedOrdersOnly()
    {

        if (dispatched == true)
        {
            dispatched = false;
        }
        else
        {
            pending = false;
            dispatched = true;
            onlyDispatchedOrders = orderRepo.GetDispatchedAndPending(displayOrders, true);
        }
    }

    private void GetPendingOrdersOnly()
    {
        if (pending == true)
        {
            pending = false;
        }
        else
        {
            dispatched = false;
            pending = true;
            onlyPendingOrders = orderRepo.GetDispatchedAndPending(displayOrders, false);
        }
    }

    /*
    public string FilterFunction { get; set; }
    private async Task FilterGUI()
    {
        switch (FilterFunction)
        {
            case "1":
                displayOrders = await orderRepo.GetOrdersAsync();
                break;
            case "2":
                displayOrders = await orderRepo.GetDispatchedAndPending(displayOrders, true);
                break;
            case "3":
                displayOrders = await orderRepo.GetDispatchedAndPending(displayOrders, false);
                break;
            default:
                displayOrders = await orderRepo.GetOrdersAsync();
                break;
        }
    }*/
}
