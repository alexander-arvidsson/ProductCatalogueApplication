@page "/orders"
@using ProductCatalogueApplication.Data
@using ProductCatalogueApplication.Data.Interfaces

@inject IOrderRepository orderRepo


<h1>Display </h1>
<div class="row bg-light">
    <table class="table table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Order ID</th>
                <th>Customer ID</th>
                <th>Delivery Adress</th>
                <th>Dispatched</th>
                <th>Order Date</th>
                <th>Payment Completed</th>
            </tr>
        </thead>
        <tbody>
            @if (displayOrders.Any())
            {
                @foreach (var b in displayOrders)
                {
                    <tr>

                        <td>@b.Id</td>
                        <td>@b.CustomerId</td>
                        <td>@b.DeliveryAdress </td>
                        <td>@b.Dispatched</td>
                        <td>@b.OrderDate</td>
                        <td>@b.PaymentCompleted</td>

                    </tr>
                }
            }
        </tbody>
    </table>
</div>

Lägg en ny order
<h1>Catalogue service </h1>
<div class="container">
    <EditForm Model="@newOrder" OnValidSubmit="(() => AddNewOrder(newOrder))">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="adress"> Order Adress </label>
            <input @bind-value="@newOrder.DeliveryAdress" type="text" />

        </div>
        <div class="form-group">
            <label for="date"> Order Date </label>
            <input @bind-value="@newOrder.OrderDate" type="datetime" />

        </div>
        <div class="form-group">
            <label for="customerId"> Customer Id </label>
            <input @bind-value="@newOrder.CustomerId" type="number" />

        </div>



        <button class="btn btn-info" type="submit"> Add Order </button>
    </EditForm>
</div>

<div class="container">
    @if (!displayOrders.Any())
    {
        <p> <em>No orders currently exist</em></p>

    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th> Orders information</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ord in displayOrders) //onclick gör nu att raden förbereder sig på uppdateringar, de uppdateras först närman klickar på update
                {
                    <tr @onclick="(() => SetOrderForUpdate(ord))">
                        <td> @ord.CustomerId </td>
                        <td> @ord.DeliveryAdress kr</td>
                        <td>
                            <button class="btn btn-success" @onclick="(() => UpdateOrder(ord))"> Update </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }


</div>

Förbered din order
<h1>OrderLine</h1>
<div class="container">
   
<EditForm Model="@newOrderLine" OnValidSubmit="(() => AddNewOrderLine(newOrderLine))">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="adress"> Order Adress </label>
        <input @bind-value="@newOrderLine.ProductId" type="text" />

    </div>
    <div class="form-group">
        <label for="date"> Order Date </label>
        <input @bind-value="@newOrderLine.Quantity" type="datetime" />

    </div>
        


    <button class="btn btn-info" type="submit"> Add Order </button>
</EditForm>

    

</div>




@code{

    List<Order> displayOrders;
    List<OrderLine> prepareOrderLine;
    List<Order> activeOrders = new List<Order>();
    //antingen göra en lista med alla produkter som finns som man kan beställa
    //eller bara ett formulär


    protected override async Task OnInitializedAsync()
    {
        displayOrders = await orderRepo.GetOrdersAsync();
        prepareOrderLine = await orderRepo.GetOrderLinesAsync();

    }
    Order newOrder = new Order();
    OrderLine newOrderLine = new OrderLine();

    private void AddNewOrder(Order o) // vi vill visa alternativen vilka produkter finns och hur många sen kan man lägga en order
    {
        //en order måste ha en kund, om den inte finns så kan den inte skapas
        orderRepo.AddNewOrder(o);
        activeOrders.Add(o); //lägger till i denna lista tillfälligt för att göra så att vi kan gå vidare till orderlines

    }

    private void ShowProducts() // vi vill ge användarna möjlighet att se vilka produkter som finns så att de kan lägga en order
    {
        //implementera en metod från ProductsRepository så att separationen håller
        //skicka med stocken från en meny
    }

    Order updatedOrder = new Order();
    //Product updatedProduct = new Product();

    private void SetOrderForUpdate(Order selected)
    {
        updatedOrder = selected;
    }

    private void UpdateOrder(Order order) //får skicka med båda objekten så att vi kan hålla koll på stock osv
    {
        orderRepo.UpdateOrder(order);
        if (order.PaymentCompleted == false)
        {
            //meddela att stock är noll
        }
    }

    private void AddNewOrderLine(OrderLine ol)
    {
        orderRepo.AddNewOrderLine(ol);
    }

}
