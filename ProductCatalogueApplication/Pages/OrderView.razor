@page "/orders"
@using ProductCatalogueApplication.Data
@using ProductCatalogueApplication.Data.Interfaces

@inject IOrderRepository orderRepo


<h1>Display </h1>
<div class="row bg-light">
    <table class="table table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Order ID</th>
                <th>Customer ID</th>
                <th>Delivery Adress</th>
                <th>Dispatched</th>
                <th>Order Date</th>
                <th>Payment Completed</th>
            </tr>
        </thead>
        <tbody>
            @if (displayOrders.Any())
            {
                @foreach (var b in displayOrders)
                {
                    <tr>

                        <td>@b.Id</td>
                        <td>@b.CustomerId</td>
                        <td>@b.DeliveryAdress </td>
                        <td>@b.Dispatched</td>
                        <td>@b.OrderDate</td>
                        <td>@b.PaymentCompleted</td>

                    </tr>
                }
            }
        </tbody>
    </table>
</div>

Lägg en ny order
<h1>Catalogue service </h1>
<div class="container">
    <EditForm Model="@newOrder" OnValidSubmit="(() => AddNewOrder(newOrder))">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="adress"> Order Adress </label>
            <input @bind-value="@newOrder.DeliveryAdress" type="text" />

        </div>
        <div class="form-group">
            <label for="date"> Order Date </label>
            <input @bind-value="@newOrder.OrderDate" type="datetime" /> 

        </div>
        <div class="form-group">
            <label for="customerId"> Customer Id </label>
            <input @bind-value="@newOrder.CustomerId" type="number" /> 

        </div>
        


        <button class="btn btn-info" type="submit"> Add Product </button> 
    </EditForm>
</div>
<div class="container">
    <EditForm Model="@updatedOrder">
        
        <button class="btn btn-info" @onclick="(() => UpdateOrder(updatedOrder, updatedProduct))"> Update Order </button> //skickar objektet newProduct till en metod AddProduct
    </EditForm>
</div>


@code{

    List<Order> displayOrders;

    protected override async Task OnInitializedAsync()
    {
        displayOrders = await orderRepo.GetOrdersAsync();
    }

    Order newOrder = new Order();
    private void AddNewOrder(Order o) // vi vill visa alternativen vilka produkter finns och hur många sen kan man lägga en order
    {
        orderRepo.AddNewOrder(o);

    }

    private void ShowProducts() // vi vill ge användarna möjlighet att se vilka produkter som finns så att de kan lägga en order
    {
        //implementera en metod från ProductsRepository så att separationen håller
        //skicka med stocken från en meny 
    }

    Order updatedOrder = new Order();
    Product updatedProduct = new Product();

    private void UpdateOrder( Order order, Product product) //får skicka med båda objekten så att vi kan hålla koll på stock osv
    {
        orderRepo.UpdateOrder(order, product);
    }

}
