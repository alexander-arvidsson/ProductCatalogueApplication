@page "/orders"
@using ProductCatalogueApplication.Data
@using ProductCatalogueApplication.Data.Interfaces

@inject IOrderRepository orderRepo

@inject ICustomerRepository customerRepo

@inject IProductRepository productRepo

<h1>Orders</h1>
@if (IsUpdating == true)
{
    <h3>Update an order</h3>
    <EditForm Model="@updatedOrder" OnValidSubmit="(() => UpdateOrder())">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="adress">Delivery Adress</label>
            <input @bind-value="@updatedOrder.DeliveryAdress" type="text" />
        </div>
        <button class="btn btn-info" type="submit">Update Order</button>
    </EditForm>
}
else if (readyOrderLines == true)
{
<h4>Choose what items to include in the order</h4>
<EditForm Model="@prepNewOrderLine" OnValidSubmit="(() => NewOrderAndOrderLines(prepNewOrder, prepNewOrderLine))">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label for="product">Product</label>
    <InputSelectNumber id="product" @bind-Value="@prepNewOrderLine.ProductId">
        @foreach (Product prod in displayProducts)
        {
            <option value="@prod.Id"> @prod.Name {@prod.Price $} </option>
        }
    </InputSelectNumber>
    <div class="form-group">
        <label for="quantity">Quantity</label>
        <input @bind-value="@prepNewOrderLine.Quantity" type="number" />
    </div>
    @if (prepNewOrderLine.ProductId != 0)
    {
        <button class="btn btn-outline-secondary" type="submit">Add item to your current order</button>
    }
</EditForm>
    if (doneBool == true)
    {
        <button id="done" class="btn btn-warning" @onclick="() => DoneAddingItems()">Done adding items?</button>
    }
}

else
{
<h3>Add a new order and choose what items to include</h3>
<EditForm Model="@prepNewOrder" OnValidSubmit="(() => PrepareNewOrder(prepNewOrder))">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="adress">Delivery Adress</label>
        <input @bind-value="@prepNewOrder.DeliveryAdress" type="text" />
    </div>
    <label for="customer"> Customer </label>
    <InputSelectNumber id="customer" @bind-Value="@prepNewOrder.CustomerId">
        @foreach (Customer cust in displayCustomers)
        {
            <option value="@cust.Id"> @cust.Name {@cust.Id} </option>
        }
        /**/
        /**/
    </InputSelectNumber>
    @if (prepNewOrder.CustomerId != 0)
    {
        <button class="btn btn-success" type="submit"> Add Order </button>
    }
</EditForm>
}


<h3>Current orders</h3>
<div class="row bg-light">
    <table class="table table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Order ID</th>
                <th>Customer ID</th>
                <th>Delivery Adress</th>
                <th>Dispatched</th>
                <th>Order Date</th>
                <th>Payment Completed</th>
                <th>Nr of items</th>
                <th class="bg-success">Update</th>
            </tr>
        </thead>
        <tbody>
            @if (displayOrders.Any())
            {
                @foreach (var b in displayOrders)
                {
                    <tr>
                        <td>@b.Id</td>
                        <td>@b.CustomerId</td>
                        <td>@b.DeliveryAdress </td>
                        <td>@b.Dispatched</td>
                        <td>@b.OrderDate</td>
                        <td>@b.PaymentCompleted</td>
                        <td><button class="btn btn-outline-info" type="button" @onclick="(() => SeeItemsInOrder(b))"> See @b.Items.Count() items </button></td>
                        @if (b.Dispatched == true)
                        {
                            <td>The product has been dispatched.</td>
                        }
                        else
                        {
                            <td>
                                <button type="button" @onclick="(() => SetForUpdate(b))" class="btn btn-outline-success">Update order info</button>
                                <button type="button" @onclick="(() => SetPayment(true, b))" class="btn btn-danger">Not payed</button>
                                <button type="button" @onclick="(() => SetPayment(false, b))" class="btn btn-success">Payed</button>
                            </td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<select type="text" id="products" class="form-control select-picker" @bind="@FilterFunction">
    <option value="1">All orders</option>
    <option value="2">Dispatched orders</option>
    <option value="3">Pending orders</option>
</select>
<br>
<button class="btn btn-info" type="button" @onclick="@FilterGUI">Filter</button>
<p></p>

<button class="btn btn-success" type="button" @onclick="(() => ProcessBatchorders(displayOrders))"> Process Batchorders </button>
<p></p>

@if (seeItemsInOrder == true)
{
    <h4>Produkter inuti den valda ordern</h4>
    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Orderline ID</th>
                    <th>Product ID</th>
                    <th>Product Name</th>
                    <th>Product Price</th>
                    <th>Quantity</th>
                    <th>Restocking Date</th>
                    <th>
                        @if (seeMyItems.PaymentCompleted == false)
                        {
                            <button type="button" @onclick="() => AddItem(seeMyItems)" class="btn btn-success">Add Item</button>
                        }
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (seeMyItemsSpec != null)
                {
                    @foreach (OrderLine b in seeMyItemsSpec)
                    {
                        <tr>
                            <td>@b.Id</td>
                            <td>@b.ProductId</td>
                            <td>@b.Product.Name</td>
                            <td>@b.Product.Price $</td>
                            <td>@b.Quantity </td>
                            @if (b.Product.RestockingDate.ToString().Equals("0001-01-01 00:00:00"))
                            {
                                <td>No restocking date </td>
                            }
                            else
                            {
                                <td>@b.Product.RestockingDate </td>
                            }
                            @if (b.Order.PaymentCompleted == false)
                            {
                                <td>
                                    <button type="button" @onclick="() => DeleteItem(b)" class="btn btn-danger">Delete Item</button>
                                </td>
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}
@code{
    //Order updateOrder = new Order();


    Order prepNewOrder = new Order();
    OrderLine prepNewOrderLine = new OrderLine();

    private bool IsUpdating = false;
    bool avoidDuplicate = false;
    bool readyOrderLines = false;
    bool seeItemsInOrder = false;
    bool doneBool = false;
    Order seeMyItems;
    List<OrderLine> seeMyItemsSpec;

    List<Customer> displayCustomers;
    List<Product> displayProducts;

    List<Order> displayOrders;
    List<OrderLine> prepareOrderLine;



    protected override async Task OnInitializedAsync()
    {
        displayOrders = await orderRepo.GetOrdersAsync();
        prepareOrderLine = await orderRepo.GetOrderLinesAsync();
        displayCustomers = await customerRepo.GetCustomersAsync();
        displayProducts = await productRepo.GetProductsAsync();
        await orderRepo.DeleteNoItemsOrders();
    }



    private async Task PrepareNewOrderLine(OrderLine addOrderLine) //////////////
    {
        //gör en metod där jag gör en orderlist som är kopplad mot det tidigare prepOrder objektet

        List<OrderLine> ordLine = seeMyItemsSpec.Where(p => p.ProductId == addOrderLine.ProductId).ToList();
        if (!ordLine.Any())
        {
            seeMyItemsSpec.Add(addOrderLine);
        } 

        await orderRepo.AddNewOrderLine(addOrderLine, prepNewOrder);
        prepNewOrderLine = new OrderLine();
    }

    private async Task AddNewOrder(Order o) /////////////////// vi vill visa alternativen vilka produkter finns och hur många sen kan man lägga en order
    {
        //en order måste ha en kund, om den inte finns så kan den inte skapas
        //avoid duplicate
        prepNewOrder = new Order();
        if (avoidDuplicate == false)
        {
            await orderRepo.AddNewOrder(o);
            avoidDuplicate = true;
        }
    }

    private void AddItem(Order bindToOrder)
    {
        readyOrderLines = true; //vi öppnar upp add item formuläret
        prepNewOrder = bindToOrder;
    }

    private async Task PrepareNewOrder(Order prepareForOrder) //////////////// vi vill visa alternativen vilka produkter finns och hur många sen kan man lägga en order
    {
        //en order måste ha en kund, om den inte finns så kan den inte skapas
        //placeOrder = true;
        readyOrderLines = true;

        await orderRepo.AddNewOrder(prepareForOrder); //lägger till okbjektet
                                                      //activeOrders.Add(o); //lägger till i denna lista tillfälligt för att göra så att vi kan gå vidare till orderlines

    }

    private async Task NewOrderAndOrderLines(Order firstOrder, OrderLine orderLineItem)
    { //lägga till ordern i listan OM det är vårat första item, samt först orderline i listan
      //om det inte är vårat första item så ska den endast uppdatera i listan för orderline

        prepareOrderLine = await orderRepo.GetOrderLinesAsync();

        if (!displayOrders.Contains(firstOrder))
        {
            displayOrders.Add(firstOrder);
        }
        prepareOrderLine.Add(orderLineItem);
        await PrepareNewOrderLine(orderLineItem);
        doneBool = true;
    }


    //uppdateringsfunktinoalitet för ordrar

    Order updatedOrder = new Order();
    //Product updatedProduct = new Product();

    Order closeOpenSeeItems = new Order();
    Order closeOpenUpdateOrder = new Order();

    private async Task ProcessBatchorders(List<Order> allOrders)
    {
        await orderRepo.BatchAndProcess(allOrders);

    }
    private async Task UpdateOrder()
    {
        await orderRepo.UpdateOrder(updatedOrder);
        IsUpdating = false;
    }


    private async Task DeleteItem(OrderLine itemToBeDeleted)
    {
        if (seeMyItemsSpec != null)
        {
            seeMyItemsSpec.Remove(itemToBeDeleted); //tar bort från  våran lista som visas i gui

        }
        if (itemToBeDeleted.Order.Items.Count() == 1)
        {
            displayOrders.Remove(itemToBeDeleted.Order);
            seeItemsInOrder = false;

        }
        await orderRepo.DeleteItem(itemToBeDeleted);

    }
    private void SetForUpdate(Order selectedOrder)
    {

        if (IsUpdating == true && closeOpenUpdateOrder == selectedOrder)
        {
            IsUpdating = false;
        }
        else
        {
            closeOpenUpdateOrder = selectedOrder;
            updatedOrder = selectedOrder;
            IsUpdating = true;
        }

    }

    private async Task SetPayment(bool payedOrNot, Order order)
    {
        await orderRepo.SetPayment(payedOrNot, order);
    }

    private async Task DoneAddingItems()
    {
        avoidDuplicate = false;
        readyOrderLines = false;
        doneBool = false;
        prepNewOrder = new Order();
        await orderRepo.DeleteNoItemsOrders();
    }

    private void SeeItemsInOrder(Order seeInOrder) //Vi vill se vilka items som finns i en order och produkter kopplade till orderlines
    {
        if (seeItemsInOrder == true && seeInOrder == closeOpenSeeItems) //gör så att vi kan klicka på knappen igen och fönstret stänger
        {
            seeItemsInOrder = false;
        }
        else
        {
            closeOpenSeeItems = seeInOrder;
            seeItemsInOrder = true;
            seeMyItems = seeInOrder;
            seeMyItemsSpec = prepareOrderLine.Where(b => b.Order == seeInOrder).ToList();
        }
    }

    public string FilterFunction { get; set; }
    private async Task FilterGUI()
    {
        switch (FilterFunction)
        {
            case "1":
                displayOrders = await orderRepo.GetOrdersAsync();
                break;
            case "2":
                displayOrders = await orderRepo.GetDispatched();
                break;
            case "3":
                displayOrders = await orderRepo.GetPending();
                break;
            default:
                displayOrders = await orderRepo.GetOrdersAsync();
                break;
        }
    }
}
