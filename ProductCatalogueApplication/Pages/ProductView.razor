@page "/products"
@using ProductCatalogueApplication.Data.Interfaces
@using ProductCatalogueApplication.Data
@inject IProductRepository productRepo

<h1>Products</h1>
<hr>

<select type="text" id="products" class="form-control select-picker" @bind="@FilterFunction">
    <option value="1">All products</option>
    <option value="2">All products not in stock</option>
</select>
<br>
<button class="btn btn-info" type="button" @onclick="@FilterGUI">Filter</button>
<p></p>
<div class="row bg-light">
    <table class="table table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Product ID</th>
                <th>Product Name</th>
                <th>Product Price</th>
                <th>Product Stock</th>
                <th>Product Description</th>
                <th>Delete Product</th>
                <th>Update Product</th>
            </tr>
        </thead>
        <tbody>
            @if (displayProducts.Any())
            {
                @foreach (var b in displayProducts)
                {
                    <tr>
                        <td>@b.Id</td>
                        <td>@b.Name </td>
                        <td>@b.Price</td>
                        <td>@b.Stock</td>
                        <td>@b.Description</td>
                        <td><button class="btn btn-danger" @onclick="(() => RemoveProduct(b))">Remove</button></td>
                        <td><button class="btn btn-outline-info" @onclick="(() => SetProductForUpdate(b))">Update</button></td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>
<br>
@if (toUpdate == true)
{
    <h3>Update a product</h3>
    <EditForm Model="@updateProduct" OnValidSubmit="(() => UpdateProduct())">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="name">Product name</label>
            <input @bind-value="@updateProduct.Name" type="text" />
        </div>
        <div class="form-group">
            <label for="description">Description</label>
            <input @bind-value="@updateProduct.Description" type="text" />
        </div>
        <div class="form-group">
            <label for="price">Product price</label>
            <input @bind-value="@updateProduct.Price" type="number" step="0.01" />
        </div>
        <div class="form-group">
            <label for="stock">Stock</label>
            <input @bind-value="@updateProduct.Stock" type="number" />
        </div>
        <button class="btn btn-info" type="submit">Update Product</button>
    </EditForm>
}
else
{
    <h3>Add a product</h3>
    <EditForm Model="@newProduct" OnValidSubmit="(() => AddProduct(newProduct))">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="name">Product name</label>
            <input @bind-value="@newProduct.Name" type="text" />
        </div>
        <div class="form-group">
            <label for="description">Description</label>
            <input @bind-value="@newProduct.Description" type="text" />
        </div>
        <div class="form-group">
            <label for="price">Product price</label>
            <input @bind-value="@newProduct.Price" type="number" step="0.01" />
        </div>
        <div class="form-group">
            <label for="stock">Stock</label>
            <input @bind-value="@newProduct.Stock" type="number" />
        </div>
        <button class="btn btn-info" type="submit">Add Product</button>
    </EditForm>
}


@code{
    List<Product> displayProducts;
    bool toUpdate = false;

    protected override async Task OnInitializedAsync()
    {
        displayProducts = await productRepo.GetProductsAsync();
    }

    Product newProduct = new Product();
    private async Task AddProduct(Product p)
    {
        await productRepo.AddProduct(newProduct);
        displayProducts.Add(newProduct);
        newProduct = new Product();

    }

    private async Task RemoveProduct(Product p)
    {
        await productRepo.RemoveProduct(p);
        displayProducts.Remove(p);
    }

    Product updateProduct = new Product();
    private void SetProductForUpdate(Product selected)
    {
        updateProduct = selected;
        toUpdate = true;
    }

    private async Task UpdateProduct()
    {
        await productRepo.UpdateProduct(updateProduct);
        toUpdate = false;
    }

    public string FilterFunction { get; set; }
    private async Task FilterGUI()
    {
        switch (FilterFunction)
        {
            case "1":
                displayProducts = await productRepo.GetProductsAsync();
                break;
            case "2":
                displayProducts = await productRepo.DisplayZeroStockAsync();
                break;
            default:
                displayProducts = await productRepo.GetProductsAsync();
                break;
        }
    }
}
